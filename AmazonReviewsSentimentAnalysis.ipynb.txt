import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
%config InlineBackend.figure_format = 'retina'
from ipywidgets import *
from IPython.display import display
from ipywidgets import FloatProgress  
import time
from IPython.html import widgets
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_curve, auc
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import classification_report,accuracy_score,confusion_matrix
from sklearn.naive_bayes import MultinomialNB
from sklearn.naive_bayes import BernoulliNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC

amazon_data = pd.read_csv("/content/drive/MyDrive/Amazon_Unlocked_Mobile.csv")

from google.colab import drive
drive.mount('/content/drive')

amazon_data = amazon_data.dropna(axis = 0)

amazon_data.shape

amazon_data.head()

amazon_data=amazon_data[["Reviews","Rating"]]


amazon_data.head()


amazon_data_pos=amazon_data[amazon_data["Rating"].isin([4,5])]


amazon_data_pos.head()


amazon_data_pos.tail()


amazon_data_neg=amazon_data[amazon_data["Rating"].isin([1,2])]


amazon_data_neg.head()


amazon_data_neg.tail()


amazon_data.Rating.value_counts()


sns.barplot(x=amazon_data.Rating.value_counts().index,y=amazon_data.Rating.value_counts().values)


amazon_data_filtered=pd.concat([amazon_data_pos[:20000],amazon_data_neg[:20000]])


amazon_data_filtered.shape


sns.barplot(x=amazon_data_filtered.Rating.value_counts().index,y=amazon_data_filtered.Rating.value_counts().values)


amazon_data_filtered["r"]=1


amazon_data_filtered["r"][amazon_data_filtered["Rating"].isin([1,2])]= 0


amazon_data_filtered.head()


amazon_data_filtered.tail()


amazon_data_filtered.r.value_counts()


from sklearn.model_selection import train_test_split


X_train_data,x_test_data,Y_train_data,y_test_data=train_test_split(amazon_data_filtered["Reviews"],amazon_data_filtered["r"],test_size=0.2)


Y_train_data.head()


X_train_data.head()


#tfidf Vectorizer
from sklearn.feature_extraction.text import TfidfVectorizer


tfidf_vector = TfidfVectorizer(stop_words="english")


tfidf_vector.fit(X_train_data)


print(tfidf_vector.get_feature_names()[0:20])
print(tfidf_vector.get_feature_names()[-20:])


X_train_data_new=tfidf_vector.transform(X_train_data)


X_train_data_new.shape


x_test_data_new=tfidf_vector.transform(x_test_data)


predictions = dict()
import ipywidgets as widgets
#Widgets

start_button=widgets.Button(description="Start System",button_style='danger') 
drop_down_choice=widgets.Dropdown(options={'Analyze each model':1,'Predict rating for new review':2,'Compare Models':3},value=2)
choose_button=widgets.Button(description="Click",button_style='danger')    
drop_down=widgets.Dropdown(options={'SVM Classifier': 1, 'Multinomial Naive Bayes': 2, 'Bernoulli Naive Bayes':3, 'RandomForest':4},value=1)
rad_button=widgets.RadioButtons(options=['Accuracy', 'ROC Curve', 'Precision,Recall and F-Measure',],value='Accuracy',disabled=False)
button= widgets.Button(description="Submit",button_style='info')
Inp_text = widgets.Text(description="", width=20000)   
button_rating= widgets.Button(description="Find Rating",button_style='info')
fp = widgets.FloatProgress(min=0,max=100,description="Calculating")  
Out_text=widgets.Text()

#1. SVM Classifier
        
def svm():   
    print("\n\nSVM Classifier")
    print("Please be patient. This may take some time.")
    svm_model = SVC()
    
    #Train Model
    svm_model.fit(X_train_data_new,Y_train_data) 
    
    #Test Model
    predictions['SVM']=svm_model.predict(x_test_data_new)   
    
    #Calculating Model Accuracy
    if rad_button.value=='Accuracy':
        print("Accuracy = "+str(accuracy_score(y_test_data,predictions['SVM'])))
        
    #Generating ROC Curve    
    if rad_button.value=='ROC Curve':
        false_positive, true_positive,_= roc_curve(y_test_data,predictions['SVM'])
        plt.title('Receiver Operating Characteristic')
        plt.plot(false_positive, true_positive)
        plt.ylabel('True Positive Rate')
        plt.xlabel('False Positive  Rate')
        plt.show()
        
    #Calculating Precision, Recall and F-Measure
    if rad_button.value=='Precision,Recall and F-Measure':
        print(classification_report(y_test_data, predictions['SVM'], target_names = ["Good", "Bad"]))
#2. Multinomial Naive Bayes Classifier
        
def multinomial():
    print("\n\nMultinomial Naive Bayes Classifier")
    print("Please be patient. This may take some time.")
    mul_model = MultinomialNB()
    
    #Train Model
    mul_model.fit(X_train_data_new,Y_train_data)
    
    #Test Model
    predictions["Multinomial"] = mul_model.predict(x_test_data_new)  
    
    #Calculating Model Accuracy
    if rad_button.value=='Accuracy':
        print("Accuracy = "+str(accuracy_score(y_test_data,predictions["Multinomial"])))
        
    #Generating ROC Curve
    if rad_button.value=='ROC Curve':
        false_positive, true_positive,_= roc_curve(y_test_data,predictions['Multinomial'])
        plt.title('Receiver Operating Characteristic')
        plt.plot(false_positive, true_positive)
        plt.ylabel('True Positive Rate')
        plt.xlabel('False Positive  Rate')
        plt.show()
        
    #Calculating Precision, Recall and F-Measure
    if rad_button.value=='Precision,Recall and F-Measure':
        print(classification_report(y_test_data, predictions['Multinomial'], target_names = ["Positive", "Negative"]))
        
        
        
#3. Bernoulli Naive Bayes Classifier
        
def bernoulli():   
    print("\n\nBernoulli Naive Bayes Classifier")
    print("Please be patient. This may take some time.")
    ber_model = BernoulliNB()
    
    #Train Model
    ber_model.fit(X_train_data_new,Y_train_data)
    
    #Test Model
    predictions["BernoulliNB"]=ber_model.predict(x_test_data_new)  
    
    #Calculating Model Accuracy
    if rad_button.value=='Accuracy':
        print("Accuracy = "+str(accuracy_score(y_test_data,predictions["BernoulliNB"])))
        
    #Generating ROC Curve
    if rad_button.value=='ROC Curve':
        false_positive, true_positive,_= roc_curve(y_test_data,predictions["BernoulliNB"])
        plt.title('Receiver Operating Characteristic')
        plt.plot(false_positive, true_positive)
        plt.ylabel('True Positive Rate')
        plt.xlabel('False Positive  Rate')
        plt.show()
        
    #Calculating Precision, Recall and F-Measure
    if rad_button.value=='Precision,Recall and F-Measure':
        print(classification_report(y_test_data, predictions["BernoulliNB"], target_names = ["Positive", "Negative"]))
        
        
        
        
        
#4. RandomForest Classifier
        
def RandomForest():
    print("\n\nRandomForest Classifier")
    print("Please be patient. This may take some time.")
    ess_model = RandomForestClassifier()
    
    #Train Model
    ess_model.fit(X_train_data_new,Y_train_data)
    
    #Test Model
    predictions["RandomForestClasification"] = ess_model.predict(x_test_data_new)
    
    #Calculating Model Accuracy
    if rad_button.value=='Accuracy':
        print("Accuracy = "+str(accuracy_score(y_test_data,predictions["RandomForestClasification"])))
        
    #Generating ROC Curve
    if rad_button.value=='ROC Curve':
        false_positive, true_positive,_= roc_curve(y_test_data,predictions["RandomForestClasification"])
        plt.title('Receiver Operating Characteristic')
        plt.plot(false_positive, true_positive)
        plt.ylabel('True Positive Rate')
        plt.xlabel('False Positive  Rate')
        plt.show()
        
    #Calculating Precision, Recall and F-Measure
    if rad_button.value=='Precision,Recall and F-Measure':
        print(classification_report(y_test_data, predictions["RandomForestClasification"], target_names = ["Positive", "Negative"]))
        
    
        
        
def compare_models():
    print("\n\nPlease wait. This may take a few minutes")
    print("\nAnalyzing SVM")
    svm_model = SVC()
    svm_model.fit(X_train_data_new,Y_train_data) 
    predictions['SVM']=svm_model.predict(x_test_data_new)
    print("\nAnalyzing Multinomial NB")
    mul_model = MultinomialNB()
    mul_model.fit(X_train_data_new,Y_train_data)
    predictions["Multinomial"] = mul_model.predict(x_test_data_new)  
    print("\nAnalyzing Bernoulli NB")
    ber_model = BernoulliNB()
    ber_model.fit(X_train_data_new,Y_train_data)
    predictions["BernoulliNB"]=ber_model.predict(x_test_data_new)
    
    print("\nAnalyzing RandomForest Classifier")
    ess_model = RandomForestClassifier()
    ess_model.fit(X_train_data_new,Y_train_data)
    predictions["RandomForestClasification"] = ess_model.predict(x_test_data_new)
    
    print("\n\nCalculating Accuracy of each model.\n\n")
    #Model Accuracy Table
    print_results = {}
    for k,v in predictions.items():
        print_results[k] = accuracy_score(y_test_data,v)
    result_table=pd.DataFrame(list(print_results.items()), columns=["Model","Accuracy"])
    print(result_table)
    #Bar chart comparing accuracies of models
    plt.figure(figsize= (10,8))
    sns.barplot(x = "Model", y = "Accuracy", data = result_table)
    plt.title("Model accuracy")
    plt.xticks(rotation = 90)
    
#GUI Code       

def analyze_each():
    print("Classifier Model")    
    display(drop_down)
    display(rad_button)
    display(button)

    def handle_submit(sender):
        if drop_down.value==1:
            svm()
       
        if drop_down.value==2:
            multinomial()
        if drop_down.value==3:
            bernoulli()
       
        if drop_down.value==4:
            RandomForest()
       
    button.on_click(handle_submit)
    
def predict_rating():
    print("Customer Review")
    
    display(Inp_text)
    
    display(button_rating)
    print ("Rating")
   
    display(Out_text)
    def handle_submit(sender):
        display(fp)
        #Predicting Rating of the Input Review
        ess_model = RandomForestClassifier()
        ess_model.fit(X_train_data_new,Y_train_data)                             
        review=Inp_text.value
        new_test_transform = tfidf_vector.transform([review])        

        for i in range(100):  
            fp.value += 1
            time.sleep(0.1)
        if ess_model.predict(new_test_transform):
            Out_text.value="Positive"
        else :
            Out_text.value="Negative"
        #svm_model = SVC()
        #svm_model.fit(X_train_data_new,Y_train_data)
        #review=Inp_text.value
        #new_test_transform = tfidf_vector.transform([review])        

        #for i in range(100):  
            #fp.value += 1
            #time.sleep(0.1)
        #if svm_model.predict(new_test_transform):
            #Out_text.value="Positive"
        #else :
            #Out_text.value="Negative"   
    Inp_text.on_submit(handle_submit)
    button_rating.on_click(handle_submit)
    
    
def actions():
    
    display(drop_down_choice)    
    display(choose_button)
    def handle_choice(sender):
        if drop_down_choice.value==1:
            analyze_each()
        if drop_down_choice.value==2:
            predict_rating()
        if drop_down_choice.value==3:
            compare_models()
    choose_button.on_click(handle_choice)
    


print("Sentiment Analysis of Customer Reviews")
display(start_button)
def loading(sender):
    actions()
start_button.on_click(loading)

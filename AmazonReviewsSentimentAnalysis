{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of AmazonReviewsSentimentAnalysisFinal.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "cfd9c61ed83a49f68ebbb7c1bd99b91d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "state": {
            "_view_name": "ButtonView",
            "style": "IPY_MODEL_7e2b749a571d4ae8b89bd5d4aa7c9658",
            "_dom_classes": [],
            "description": "Start System",
            "_model_name": "ButtonModel",
            "button_style": "danger",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "tooltip": "",
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "layout": "IPY_MODEL_db376d58e1fe444096630b851df363bc",
            "_model_module": "@jupyter-widgets/controls",
            "icon": ""
          }
        },
        "7e2b749a571d4ae8b89bd5d4aa7c9658": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ButtonStyleModel",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "button_color": null,
            "font_weight": "",
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "db376d58e1fe444096630b851df363bc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4ca0242c1f164ed7864ba009492d1196": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "state": {
            "_options_labels": [
              "Analyze each model",
              "Predict rating for new review",
              "Compare Models"
            ],
            "_view_name": "DropdownView",
            "style": "IPY_MODEL_58b4ffcf058c436bba865be31702e378",
            "_dom_classes": [],
            "description": "",
            "_model_name": "DropdownModel",
            "index": 0,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_7fc57fee94f64a81bb15339d66a212a9"
          }
        },
        "58b4ffcf058c436bba865be31702e378": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "7fc57fee94f64a81bb15339d66a212a9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "091877bbf5ab499a934f90fb7a6e685b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "state": {
            "_view_name": "ButtonView",
            "style": "IPY_MODEL_ee187f64a9da4df19c56e05b4aa33fd7",
            "_dom_classes": [],
            "description": "Click",
            "_model_name": "ButtonModel",
            "button_style": "danger",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "tooltip": "",
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "layout": "IPY_MODEL_2ef7e56e81d54086b885be1017c81fe8",
            "_model_module": "@jupyter-widgets/controls",
            "icon": ""
          }
        },
        "ee187f64a9da4df19c56e05b4aa33fd7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ButtonStyleModel",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "button_color": null,
            "font_weight": "",
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "2ef7e56e81d54086b885be1017c81fe8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b4ca01c5a9004fe7a00907dfe87fdabe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "state": {
            "_options_labels": [
              "SVM Classifier",
              "Multinomial Naive Bayes",
              "Bernoulli Naive Bayes",
              "RandomForest"
            ],
            "_view_name": "DropdownView",
            "style": "IPY_MODEL_79593072c604454386d975825b659c44",
            "_dom_classes": [],
            "description": "",
            "_model_name": "DropdownModel",
            "index": 3,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_e3c41f4b54e341a28ec70c2c83be9534"
          }
        },
        "79593072c604454386d975825b659c44": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "e3c41f4b54e341a28ec70c2c83be9534": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "1406cc9d24904bc38e8495fab354dbf0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "RadioButtonsModel",
          "state": {
            "_options_labels": [
              "Accuracy",
              "ROC Curve",
              "Precision,Recall and F-Measure"
            ],
            "_view_name": "RadioButtonsView",
            "style": "IPY_MODEL_4de91796d1da4b87abd272d26230158c",
            "_dom_classes": [],
            "description": "",
            "_model_name": "RadioButtonsModel",
            "index": 2,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_611df4a208974f1db7c3c44ec5808eb0"
          }
        },
        "4de91796d1da4b87abd272d26230158c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "611df4a208974f1db7c3c44ec5808eb0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2641069b28d740ebb7fd0f3d1ef87afb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "state": {
            "_view_name": "ButtonView",
            "style": "IPY_MODEL_c16ef1fa030e4513bc5fe3fd9421d6dd",
            "_dom_classes": [],
            "description": "Submit",
            "_model_name": "ButtonModel",
            "button_style": "info",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "tooltip": "",
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "layout": "IPY_MODEL_8bba40d584c44c14a16ee2c91ba182d0",
            "_model_module": "@jupyter-widgets/controls",
            "icon": ""
          }
        },
        "c16ef1fa030e4513bc5fe3fd9421d6dd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ButtonStyleModel",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "button_color": null,
            "font_weight": "",
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "8bba40d584c44c14a16ee2c91ba182d0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "fFugm77YVL51",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "75e247e7-b65a-4580-de46-e98b90598b6c"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "%matplotlib inline\n",
        "%config InlineBackend.figure_format = 'retina'\n",
        "from ipywidgets import *\n",
        "from IPython.display import display\n",
        "from ipywidgets import FloatProgress  \n",
        "import time\n",
        "from IPython.html import widgets\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.metrics import classification_report,accuracy_score,confusion_matrix\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.naive_bayes import BernoulliNB\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/IPython/html.py:14: ShimWarning: The `IPython.html` package has been deprecated since IPython 4.0. You should import from `notebook` instead. `IPython.html.widgets` has moved to `ipywidgets`.\n",
            "  \"`IPython.html.widgets` has moved to `ipywidgets`.\", ShimWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wLR1ZfypWbAW"
      },
      "source": [
        "amazon_data = pd.read_csv(\"/content/drive/MyDrive/Amazon_Unlocked_Mobile.csv\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S9KgQJ5DVYcX",
        "outputId": "cfdebf4a-dc0e-44ea-b5a9-89ca55cc76b8"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d6JMUSViWbRb"
      },
      "source": [
        "amazon_data = amazon_data.dropna(axis = 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nSMW7MpVWbdd",
        "outputId": "5ce02d32-e267-4b1f-c453-ab24b2e18765"
      },
      "source": [
        "amazon_data.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(334335, 6)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "RBLEjN2sWbnF",
        "outputId": "e347e218-97e6-44ec-a71e-c7617230bdb1"
      },
      "source": [
        "amazon_data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product Name</th>\n",
              "      <th>Brand Name</th>\n",
              "      <th>Price</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Review Votes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>\"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>199.99</td>\n",
              "      <td>5</td>\n",
              "      <td>I feel so LUCKY to have found this used (phone...</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>\"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>199.99</td>\n",
              "      <td>4</td>\n",
              "      <td>nice phone, nice up grade from my pantach revu...</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>\"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>199.99</td>\n",
              "      <td>5</td>\n",
              "      <td>Very pleased</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>\"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>199.99</td>\n",
              "      <td>4</td>\n",
              "      <td>It works good but it goes slow sometimes but i...</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>\"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>199.99</td>\n",
              "      <td>4</td>\n",
              "      <td>Great phone to replace my lost phone. The only...</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                        Product Name  ... Review Votes\n",
              "0  \"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...  ...          1.0\n",
              "1  \"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...  ...          0.0\n",
              "2  \"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...  ...          0.0\n",
              "3  \"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...  ...          0.0\n",
              "4  \"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...  ...          0.0\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F7lIXrqLXCas"
      },
      "source": [
        "amazon_data=amazon_data[[\"Reviews\",\"Rating\"]]\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "RDIlVubdXCsw",
        "outputId": "a15403e0-5fb6-4df3-fecc-48bcea526a91"
      },
      "source": [
        "amazon_data.head()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>I feel so LUCKY to have found this used (phone...</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>nice phone, nice up grade from my pantach revu...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Very pleased</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>It works good but it goes slow sometimes but i...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Great phone to replace my lost phone. The only...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                             Reviews  Rating\n",
              "0  I feel so LUCKY to have found this used (phone...       5\n",
              "1  nice phone, nice up grade from my pantach revu...       4\n",
              "2                                       Very pleased       5\n",
              "3  It works good but it goes slow sometimes but i...       4\n",
              "4  Great phone to replace my lost phone. The only...       4"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fhn3pRyjXC6U"
      },
      "source": [
        "amazon_data_pos=amazon_data[amazon_data[\"Rating\"].isin([4,5])]\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "h8z4w8OiXDC2",
        "outputId": "1e62deea-e815-4bd6-d9f1-44988fa35092"
      },
      "source": [
        "amazon_data_pos.head()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>I feel so LUCKY to have found this used (phone...</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>nice phone, nice up grade from my pantach revu...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Very pleased</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>It works good but it goes slow sometimes but i...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Great phone to replace my lost phone. The only...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                             Reviews  Rating\n",
              "0  I feel so LUCKY to have found this used (phone...       5\n",
              "1  nice phone, nice up grade from my pantach revu...       4\n",
              "2                                       Very pleased       5\n",
              "3  It works good but it goes slow sometimes but i...       4\n",
              "4  Great phone to replace my lost phone. The only...       4"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "QnJ-p-hKXDJN",
        "outputId": "6d6ca8d7-987a-40a8-d0bd-306467947243"
      },
      "source": [
        "amazon_data_pos.tail()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>413830</th>\n",
              "      <td>LOVE IT</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413832</th>\n",
              "      <td>good rugged phone that has a long-lasting batt...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413835</th>\n",
              "      <td>another great deal great price</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413837</th>\n",
              "      <td>Passes every drop test onto porcelain tile!</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413839</th>\n",
              "      <td>Only downside is that apparently Verizon no lo...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                  Reviews  Rating\n",
              "413830                                            LOVE IT       5\n",
              "413832  good rugged phone that has a long-lasting batt...       4\n",
              "413835                     another great deal great price       5\n",
              "413837        Passes every drop test onto porcelain tile!       5\n",
              "413839  Only downside is that apparently Verizon no lo...       4"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vazmKjqzXDMN"
      },
      "source": [
        "amazon_data_neg=amazon_data[amazon_data[\"Rating\"].isin([1,2])]\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "Vs21tPnwXDPv",
        "outputId": "bcc5ba5e-e805-4d2b-b703-38ad59858ea4"
      },
      "source": [
        "amazon_data_neg.head()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>I already had a phone with problems... I know ...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The charging port was loose. I got that solder...</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Phone looks good but wouldn't stay charged, ha...</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>I'm really disappointed about my phone and ser...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Had this phone before and loved it but was not...</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                              Reviews  Rating\n",
              "5   I already had a phone with problems... I know ...       1\n",
              "6   The charging port was loose. I got that solder...       2\n",
              "7   Phone looks good but wouldn't stay charged, ha...       2\n",
              "13  I'm really disappointed about my phone and ser...       1\n",
              "15  Had this phone before and loved it but was not...       2"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "nJYVrxoNXDSl",
        "outputId": "e6ea14c9-1b06-4e18-ec6f-56d2df3a1ecb"
      },
      "source": [
        "amazon_data_neg.tail()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>413817</th>\n",
              "      <td>This is the second junk Convoy I have owned. T...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413820</th>\n",
              "      <td>They said phone was normal wear but it was a l...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413828</th>\n",
              "      <td>Would not work</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413831</th>\n",
              "      <td>Item was listed as new, but was not. When we t...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413834</th>\n",
              "      <td>used hard</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                  Reviews  Rating\n",
              "413817  This is the second junk Convoy I have owned. T...       1\n",
              "413820  They said phone was normal wear but it was a l...       1\n",
              "413828                                     Would not work       1\n",
              "413831  Item was listed as new, but was not. When we t...       1\n",
              "413834                                          used hard       1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qfrQGWupXDWL",
        "outputId": "4235b8c1-2960-481a-d2b8-f405f9c2fc22"
      },
      "source": [
        "amazon_data.Rating.value_counts()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5    180253\n",
              "1     57535\n",
              "4     50421\n",
              "3     26058\n",
              "2     20068\n",
              "Name: Rating, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "5mYdHt4UXhoY",
        "outputId": "c769c49c-2088-49e9-f11d-a1b4ad98f443"
      },
      "source": [
        "sns.barplot(x=amazon_data.Rating.value_counts().index,y=amazon_data.Rating.value_counts().values)\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f029a5619b0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "image/png": {
              "width": 394,
              "height": 248
            },
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kb3QEz5cXhzl"
      },
      "source": [
        "amazon_data_filtered=pd.concat([amazon_data_pos[:20000],amazon_data_neg[:20000]])\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HP6KvVv9Xh2Q",
        "outputId": "287e564f-ec91-41ac-e40d-79ddd8f45f1d"
      },
      "source": [
        "amazon_data_filtered.shape\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(40000, 2)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "9sSWyLvrXh5J",
        "outputId": "ebb6bfff-8308-41ab-9855-3fe02e96e0e2"
      },
      "source": [
        "sns.barplot(x=amazon_data_filtered.Rating.value_counts().index,y=amazon_data_filtered.Rating.value_counts().values)\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f029912bf28>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "image/png": {
              "width": 388,
              "height": 248
            },
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MCVu6uL7Xh8U"
      },
      "source": [
        "amazon_data_filtered[\"r\"]=1\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6jIxDK39XiFU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eaf3388b-99f7-4853-dbb9-6bd01e9ab966"
      },
      "source": [
        "amazon_data_filtered[\"r\"][amazon_data_filtered[\"Rating\"].isin([1,2])]= 0\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "jAWNCnKtXiHi",
        "outputId": "37a507ef-5d12-4038-92e2-adb09ec08d89"
      },
      "source": [
        "amazon_data_filtered.head()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Rating</th>\n",
              "      <th>r</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>I feel so LUCKY to have found this used (phone...</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>nice phone, nice up grade from my pantach revu...</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Very pleased</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>It works good but it goes slow sometimes but i...</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Great phone to replace my lost phone. The only...</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                             Reviews  Rating  r\n",
              "0  I feel so LUCKY to have found this used (phone...       5  1\n",
              "1  nice phone, nice up grade from my pantach revu...       4  1\n",
              "2                                       Very pleased       5  1\n",
              "3  It works good but it goes slow sometimes but i...       4  1\n",
              "4  Great phone to replace my lost phone. The only...       4  1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "EdAkB6Q0XiLD",
        "outputId": "ae2d47c3-7157-4db6-f7a7-4fab90446bf5"
      },
      "source": [
        "amazon_data_filtered.tail()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Rating</th>\n",
              "      <th>r</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>109307</th>\n",
              "      <td>Phone does not work, no one can hear me talkin...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109308</th>\n",
              "      <td>A little disappointing, doesn't have any memor...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109310</th>\n",
              "      <td>poor volume very hard to hear</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109313</th>\n",
              "      <td>I received the phone with damaged screen , I r...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109316</th>\n",
              "      <td>It was slow not what i expected small screen o...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                  Reviews  Rating  r\n",
              "109307  Phone does not work, no one can hear me talkin...       1  0\n",
              "109308  A little disappointing, doesn't have any memor...       2  0\n",
              "109310                      poor volume very hard to hear       1  0\n",
              "109313  I received the phone with damaged screen , I r...       1  0\n",
              "109316  It was slow not what i expected small screen o...       1  0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PUv7UXtpYAvI",
        "outputId": "9df48fc1-a736-4657-9c35-f3c569f19c4f"
      },
      "source": [
        "amazon_data_filtered.r.value_counts()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    20000\n",
              "0    20000\n",
              "Name: r, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7CMCB0aoYBAD"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iIhWrHx4YBMU"
      },
      "source": [
        "X_train_data,x_test_data,Y_train_data,y_test_data=train_test_split(amazon_data_filtered[\"Reviews\"],amazon_data_filtered[\"r\"],test_size=0.2)\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wFDkmEBXYBPa",
        "outputId": "b827ec87-e3b1-4c38-9dca-02d6ae92f650"
      },
      "source": [
        "Y_train_data.head()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "74368    0\n",
              "2611     1\n",
              "28714    1\n",
              "33212    1\n",
              "27078    0\n",
              "Name: r, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sGjQ1Ko2YBTw",
        "outputId": "46ac5767-5e2e-45d0-eeaa-bb6362c3734f"
      },
      "source": [
        "X_train_data.head()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "74368    This is an Apple iPhone but 100% Chinese versi...\n",
              "2611                                    Item as described.\n",
              "28714    I got the phone and it works perfectly. very h...\n",
              "33212    Bought this for my daughter as a gift. She lov...\n",
              "27078    I bought this for my daughter less than 1 yr a...\n",
              "Name: Reviews, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4dEn0lcdYzZS"
      },
      "source": [
        "#tfidf Vectorizer\r\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fdSPRGXbYzc3"
      },
      "source": [
        "tfidf_vector = TfidfVectorizer(stop_words=\"english\")\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GTJztNWNYzfz",
        "outputId": "47145774-6d0c-4b7a-9c90-e154c569e5be"
      },
      "source": [
        "tfidf_vector.fit(X_train_data)\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n",
              "                dtype=<class 'numpy.float64'>, encoding='utf-8',\n",
              "                input='content', lowercase=True, max_df=1.0, max_features=None,\n",
              "                min_df=1, ngram_range=(1, 1), norm='l2', preprocessor=None,\n",
              "                smooth_idf=True, stop_words='english', strip_accents=None,\n",
              "                sublinear_tf=False, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b',\n",
              "                tokenizer=None, use_idf=True, vocabulary=None)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rq3bhPkgYz4B",
        "outputId": "baab8028-9928-4907-85a7-f260c15bbe52"
      },
      "source": [
        "print(tfidf_vector.get_feature_names()[0:20])\r\n",
        "print(tfidf_vector.get_feature_names()[-20:])\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['00', '000', '0000', '000mah', '002', '00pm', '01', '013435003182980', '02', '03', '04', '04th', '06', '07', '08', '0804245', '0829', '09', '0cant', '0ghz']\n",
            "['zip', 'ziploc', 'ziplock', 'zippy', 'zips', 'zmax', 'zone', 'zones', 'zoom', 'zoomed', 'zooming', 'zte', 'ítem', 'óptico', 'ýn', 'śo', '中国要用卡贴', '买来三天就被偷了not', '支持联通移动2g', '还不错']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0PSj7bERYz7S"
      },
      "source": [
        "X_train_data_new=tfidf_vector.transform(X_train_data)\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ik1k0jtvYz_f",
        "outputId": "5399b398-6477-4fa0-e8e8-3dd5009fe0a3"
      },
      "source": [
        "X_train_data_new.shape\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(32000, 15453)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lutI0l7dY0OJ"
      },
      "source": [
        "x_test_data_new=tfidf_vector.transform(x_test_data)\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 924,
          "referenced_widgets": [
            "cfd9c61ed83a49f68ebbb7c1bd99b91d",
            "7e2b749a571d4ae8b89bd5d4aa7c9658",
            "db376d58e1fe444096630b851df363bc",
            "4ca0242c1f164ed7864ba009492d1196",
            "58b4ffcf058c436bba865be31702e378",
            "7fc57fee94f64a81bb15339d66a212a9",
            "091877bbf5ab499a934f90fb7a6e685b",
            "ee187f64a9da4df19c56e05b4aa33fd7",
            "2ef7e56e81d54086b885be1017c81fe8",
            "b4ca01c5a9004fe7a00907dfe87fdabe",
            "79593072c604454386d975825b659c44",
            "e3c41f4b54e341a28ec70c2c83be9534",
            "1406cc9d24904bc38e8495fab354dbf0",
            "4de91796d1da4b87abd272d26230158c",
            "611df4a208974f1db7c3c44ec5808eb0",
            "2641069b28d740ebb7fd0f3d1ef87afb",
            "c16ef1fa030e4513bc5fe3fd9421d6dd",
            "8bba40d584c44c14a16ee2c91ba182d0"
          ]
        },
        "id": "vGp2JJozY0lo",
        "outputId": "c0281ce0-e4f8-48b6-ae77-ec30cb808d10"
      },
      "source": [
        "predictions = dict()\r\n",
        "import ipywidgets as widgets\r\n",
        "#Widgets\r\n",
        "\r\n",
        "start_button=widgets.Button(description=\"Start System\",button_style='danger') \r\n",
        "drop_down_choice=widgets.Dropdown(options={'Analyze each model':1,'Predict rating for new review':2,'Compare Models':3},value=2)\r\n",
        "choose_button=widgets.Button(description=\"Click\",button_style='danger')    \r\n",
        "drop_down=widgets.Dropdown(options={'SVM Classifier': 1, 'Multinomial Naive Bayes': 2, 'Bernoulli Naive Bayes':3, 'RandomForest':4},value=1)\r\n",
        "rad_button=widgets.RadioButtons(options=['Accuracy', 'ROC Curve', 'Precision,Recall and F-Measure',],value='Accuracy',disabled=False)\r\n",
        "button= widgets.Button(description=\"Submit\",button_style='info')\r\n",
        "Inp_text = widgets.Text(description=\"\", width=20000)   \r\n",
        "button_rating= widgets.Button(description=\"Find Rating\",button_style='info')\r\n",
        "fp = widgets.FloatProgress(min=0,max=100,description=\"Calculating\")  \r\n",
        "Out_text=widgets.Text()\r\n",
        "\r\n",
        "#1. SVM Classifier\r\n",
        "        \r\n",
        "def svm():   \r\n",
        "    print(\"\\n\\nSVM Classifier\")\r\n",
        "    print(\"Please be patient. This may take some time.\")\r\n",
        "    svm_model = SVC()\r\n",
        "    \r\n",
        "    #Train Model\r\n",
        "    svm_model.fit(X_train_data_new,Y_train_data) \r\n",
        "    \r\n",
        "    #Test Model\r\n",
        "    predictions['SVM']=svm_model.predict(x_test_data_new)   \r\n",
        "    \r\n",
        "    #Calculating Model Accuracy\r\n",
        "    if rad_button.value=='Accuracy':\r\n",
        "        print(\"Accuracy = \"+str(accuracy_score(y_test_data,predictions['SVM'])))\r\n",
        "        \r\n",
        "    #Generating ROC Curve    \r\n",
        "    if rad_button.value=='ROC Curve':\r\n",
        "        false_positive, true_positive,_= roc_curve(y_test_data,predictions['SVM'])\r\n",
        "        plt.title('Receiver Operating Characteristic')\r\n",
        "        plt.plot(false_positive, true_positive)\r\n",
        "        plt.ylabel('True Positive Rate')\r\n",
        "        plt.xlabel('False Positive  Rate')\r\n",
        "        plt.show()\r\n",
        "        \r\n",
        "    #Calculating Precision, Recall and F-Measure\r\n",
        "    if rad_button.value=='Precision,Recall and F-Measure':\r\n",
        "        print(classification_report(y_test_data, predictions['SVM'], target_names = [\"Good\", \"Bad\"]))\r\n",
        "#2. Multinomial Naive Bayes Classifier\r\n",
        "        \r\n",
        "def multinomial():\r\n",
        "    print(\"\\n\\nMultinomial Naive Bayes Classifier\")\r\n",
        "    print(\"Please be patient. This may take some time.\")\r\n",
        "    mul_model = MultinomialNB()\r\n",
        "    \r\n",
        "    #Train Model\r\n",
        "    mul_model.fit(X_train_data_new,Y_train_data)\r\n",
        "    \r\n",
        "    #Test Model\r\n",
        "    predictions[\"Multinomial\"] = mul_model.predict(x_test_data_new)  \r\n",
        "    \r\n",
        "    #Calculating Model Accuracy\r\n",
        "    if rad_button.value=='Accuracy':\r\n",
        "        print(\"Accuracy = \"+str(accuracy_score(y_test_data,predictions[\"Multinomial\"])))\r\n",
        "        \r\n",
        "    #Generating ROC Curve\r\n",
        "    if rad_button.value=='ROC Curve':\r\n",
        "        false_positive, true_positive,_= roc_curve(y_test_data,predictions['Multinomial'])\r\n",
        "        plt.title('Receiver Operating Characteristic')\r\n",
        "        plt.plot(false_positive, true_positive)\r\n",
        "        plt.ylabel('True Positive Rate')\r\n",
        "        plt.xlabel('False Positive  Rate')\r\n",
        "        plt.show()\r\n",
        "        \r\n",
        "    #Calculating Precision, Recall and F-Measure\r\n",
        "    if rad_button.value=='Precision,Recall and F-Measure':\r\n",
        "        print(classification_report(y_test_data, predictions['Multinomial'], target_names = [\"Positive\", \"Negative\"]))\r\n",
        "        \r\n",
        "        \r\n",
        "        \r\n",
        "#3. Bernoulli Naive Bayes Classifier\r\n",
        "        \r\n",
        "def bernoulli():   \r\n",
        "    print(\"\\n\\nBernoulli Naive Bayes Classifier\")\r\n",
        "    print(\"Please be patient. This may take some time.\")\r\n",
        "    ber_model = BernoulliNB()\r\n",
        "    \r\n",
        "    #Train Model\r\n",
        "    ber_model.fit(X_train_data_new,Y_train_data)\r\n",
        "    \r\n",
        "    #Test Model\r\n",
        "    predictions[\"BernoulliNB\"]=ber_model.predict(x_test_data_new)  \r\n",
        "    \r\n",
        "    #Calculating Model Accuracy\r\n",
        "    if rad_button.value=='Accuracy':\r\n",
        "        print(\"Accuracy = \"+str(accuracy_score(y_test_data,predictions[\"BernoulliNB\"])))\r\n",
        "        \r\n",
        "    #Generating ROC Curve\r\n",
        "    if rad_button.value=='ROC Curve':\r\n",
        "        false_positive, true_positive,_= roc_curve(y_test_data,predictions[\"BernoulliNB\"])\r\n",
        "        plt.title('Receiver Operating Characteristic')\r\n",
        "        plt.plot(false_positive, true_positive)\r\n",
        "        plt.ylabel('True Positive Rate')\r\n",
        "        plt.xlabel('False Positive  Rate')\r\n",
        "        plt.show()\r\n",
        "        \r\n",
        "    #Calculating Precision, Recall and F-Measure\r\n",
        "    if rad_button.value=='Precision,Recall and F-Measure':\r\n",
        "        print(classification_report(y_test_data, predictions[\"BernoulliNB\"], target_names = [\"Positive\", \"Negative\"]))\r\n",
        "        \r\n",
        "        \r\n",
        "        \r\n",
        "        \r\n",
        "        \r\n",
        "#4. RandomForest Classifier\r\n",
        "        \r\n",
        "def RandomForest():\r\n",
        "    print(\"\\n\\nRandomForest Classifier\")\r\n",
        "    print(\"Please be patient. This may take some time.\")\r\n",
        "    ess_model = RandomForestClassifier()\r\n",
        "    \r\n",
        "    #Train Model\r\n",
        "    ess_model.fit(X_train_data_new,Y_train_data)\r\n",
        "    \r\n",
        "    #Test Model\r\n",
        "    predictions[\"RandomForestClasification\"] = ess_model.predict(x_test_data_new)\r\n",
        "    \r\n",
        "    #Calculating Model Accuracy\r\n",
        "    if rad_button.value=='Accuracy':\r\n",
        "        print(\"Accuracy = \"+str(accuracy_score(y_test_data,predictions[\"RandomForestClasification\"])))\r\n",
        "        \r\n",
        "    #Generating ROC Curve\r\n",
        "    if rad_button.value=='ROC Curve':\r\n",
        "        false_positive, true_positive,_= roc_curve(y_test_data,predictions[\"RandomForestClasification\"])\r\n",
        "        plt.title('Receiver Operating Characteristic')\r\n",
        "        plt.plot(false_positive, true_positive)\r\n",
        "        plt.ylabel('True Positive Rate')\r\n",
        "        plt.xlabel('False Positive  Rate')\r\n",
        "        plt.show()\r\n",
        "        \r\n",
        "    #Calculating Precision, Recall and F-Measure\r\n",
        "    if rad_button.value=='Precision,Recall and F-Measure':\r\n",
        "        print(classification_report(y_test_data, predictions[\"RandomForestClasification\"], target_names = [\"Positive\", \"Negative\"]))\r\n",
        "        \r\n",
        "    \r\n",
        "        \r\n",
        "        \r\n",
        "def compare_models():\r\n",
        "    print(\"\\n\\nPlease wait. This may take a few minutes\")\r\n",
        "    print(\"\\nAnalyzing SVM\")\r\n",
        "    svm_model = SVC()\r\n",
        "    svm_model.fit(X_train_data_new,Y_train_data) \r\n",
        "    predictions['SVM']=svm_model.predict(x_test_data_new)\r\n",
        "    print(\"\\nAnalyzing Multinomial NB\")\r\n",
        "    mul_model = MultinomialNB()\r\n",
        "    mul_model.fit(X_train_data_new,Y_train_data)\r\n",
        "    predictions[\"Multinomial\"] = mul_model.predict(x_test_data_new)  \r\n",
        "    print(\"\\nAnalyzing Bernoulli NB\")\r\n",
        "    ber_model = BernoulliNB()\r\n",
        "    ber_model.fit(X_train_data_new,Y_train_data)\r\n",
        "    predictions[\"BernoulliNB\"]=ber_model.predict(x_test_data_new)\r\n",
        "    \r\n",
        "    print(\"\\nAnalyzing RandomForest Classifier\")\r\n",
        "    ess_model = RandomForestClassifier()\r\n",
        "    ess_model.fit(X_train_data_new,Y_train_data)\r\n",
        "    predictions[\"RandomForestClasification\"] = ess_model.predict(x_test_data_new)\r\n",
        "    \r\n",
        "    print(\"\\n\\nCalculating Accuracy of each model.\\n\\n\")\r\n",
        "    #Model Accuracy Table\r\n",
        "    print_results = {}\r\n",
        "    for k,v in predictions.items():\r\n",
        "        print_results[k] = accuracy_score(y_test_data,v)\r\n",
        "    result_table=pd.DataFrame(list(print_results.items()), columns=[\"Model\",\"Accuracy\"])\r\n",
        "    print(result_table)\r\n",
        "    #Bar chart comparing accuracies of models\r\n",
        "    plt.figure(figsize= (10,8))\r\n",
        "    sns.barplot(x = \"Model\", y = \"Accuracy\", data = result_table)\r\n",
        "    plt.title(\"Model accuracy\")\r\n",
        "    plt.xticks(rotation = 90)\r\n",
        "    \r\n",
        "#GUI Code       \r\n",
        "\r\n",
        "def analyze_each():\r\n",
        "    print(\"Classifier Model\")    \r\n",
        "    display(drop_down)\r\n",
        "    display(rad_button)\r\n",
        "    display(button)\r\n",
        "\r\n",
        "    def handle_submit(sender):\r\n",
        "        if drop_down.value==1:\r\n",
        "            svm()\r\n",
        "       \r\n",
        "        if drop_down.value==2:\r\n",
        "            multinomial()\r\n",
        "        if drop_down.value==3:\r\n",
        "            bernoulli()\r\n",
        "       \r\n",
        "        if drop_down.value==4:\r\n",
        "            RandomForest()\r\n",
        "       \r\n",
        "    button.on_click(handle_submit)\r\n",
        "    \r\n",
        "def predict_rating():\r\n",
        "    print(\"Customer Review\")\r\n",
        "    \r\n",
        "    display(Inp_text)\r\n",
        "    \r\n",
        "    display(button_rating)\r\n",
        "    print (\"Rating\")\r\n",
        "   \r\n",
        "    display(Out_text)\r\n",
        "    def handle_submit(sender):\r\n",
        "        display(fp)\r\n",
        "        #Predicting Rating of the Input Review\r\n",
        "        ess_model = RandomForestClassifier()\r\n",
        "        ess_model.fit(X_train_data_new,Y_train_data)                             \r\n",
        "        review=Inp_text.value\r\n",
        "        new_test_transform = tfidf_vector.transform([review])        \r\n",
        "\r\n",
        "        for i in range(100):  \r\n",
        "            fp.value += 1\r\n",
        "            time.sleep(0.1)\r\n",
        "        if ess_model.predict(new_test_transform):\r\n",
        "            Out_text.value=\"Positive\"\r\n",
        "        else :\r\n",
        "            Out_text.value=\"Negative\"\r\n",
        "        #svm_model = SVC()\r\n",
        "        #svm_model.fit(X_train_data_new,Y_train_data)\r\n",
        "        #review=Inp_text.value\r\n",
        "        #new_test_transform = tfidf_vector.transform([review])        \r\n",
        "\r\n",
        "        #for i in range(100):  \r\n",
        "            #fp.value += 1\r\n",
        "            #time.sleep(0.1)\r\n",
        "        #if svm_model.predict(new_test_transform):\r\n",
        "            #Out_text.value=\"Positive\"\r\n",
        "        #else :\r\n",
        "            #Out_text.value=\"Negative\"   \r\n",
        "    Inp_text.on_submit(handle_submit)\r\n",
        "    button_rating.on_click(handle_submit)\r\n",
        "    \r\n",
        "    \r\n",
        "def actions():\r\n",
        "    \r\n",
        "    display(drop_down_choice)    \r\n",
        "    display(choose_button)\r\n",
        "    def handle_choice(sender):\r\n",
        "        if drop_down_choice.value==1:\r\n",
        "            analyze_each()\r\n",
        "        if drop_down_choice.value==2:\r\n",
        "            predict_rating()\r\n",
        "        if drop_down_choice.value==3:\r\n",
        "            compare_models()\r\n",
        "    choose_button.on_click(handle_choice)\r\n",
        "    \r\n",
        "\r\n",
        "\r\n",
        "print(\"Sentiment Analysis of Customer Reviews\")\r\n",
        "display(start_button)\r\n",
        "def loading(sender):\r\n",
        "    actions()\r\n",
        "start_button.on_click(loading)\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Sentiment Analysis of Customer Reviews\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "cfd9c61ed83a49f68ebbb7c1bd99b91d",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "Button(button_style='danger', description='Start System', style=ButtonStyle())"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "4ca0242c1f164ed7864ba009492d1196",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "Dropdown(index=1, options={'Analyze each model': 1, 'Predict rating for new review': 2, 'Compare Models': 3}, …"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "091877bbf5ab499a934f90fb7a6e685b",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "Button(button_style='danger', description='Click', style=ButtonStyle())"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Classifier Model\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "b4ca01c5a9004fe7a00907dfe87fdabe",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "Dropdown(options={'SVM Classifier': 1, 'Multinomial Naive Bayes': 2, 'Bernoulli Naive Bayes': 3, 'RandomForest…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "1406cc9d24904bc38e8495fab354dbf0",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "RadioButtons(options=('Accuracy', 'ROC Curve', 'Precision,Recall and F-Measure'), value='Accuracy')"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "2641069b28d740ebb7fd0f3d1ef87afb",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "Button(button_style='info', description='Submit', style=ButtonStyle())"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "RandomForest Classifier\n",
            "Please be patient. This may take some time.\n",
            "Accuracy = 0.968\n",
            "\n",
            "\n",
            "RandomForest Classifier\n",
            "Please be patient. This may take some time.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "image/png": {
              "width": 385,
              "height": 277
            },
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "RandomForest Classifier\n",
            "Please be patient. This may take some time.\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    Positive       0.96      0.97      0.97      3980\n",
            "    Negative       0.97      0.96      0.97      4020\n",
            "\n",
            "    accuracy                           0.97      8000\n",
            "   macro avg       0.97      0.97      0.97      8000\n",
            "weighted avg       0.97      0.97      0.97      8000\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}